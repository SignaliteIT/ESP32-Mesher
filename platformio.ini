; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
name = ESP32 Mesher
description = A Commun ground to create a networked mesh for ESP32 or Arduino Wifi compatible boards

[options]
platform = espressif32
board = arduino_nano_esp32
framework = arduino

lib_deps_native = 
	bblanchon/ArduinoJson@^7.0.4
; lib_deps_board_only = 

recette_flags =
  -DRECETTE

coverage_buildflag = 	
  -Og -g
  -lgcov
  --coverage
  -fprofile-abs-path

[env:arduino_nano_esp32]
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
lib_deps = 
	${options.lib_deps_native}
	; ${options.lib_deps_board_only}
extra_scripts = 
    pre:.github/workflows/buildinfo.py

[env:tests]
platform = native
test_ignore = test_embedded ; if there were some in the future
lib_deps = 
	${options.lib_deps_native}
build_flags =
  ${options.recette_flags}
	${options.coverage_buildflag}
extra_scripts = 
    pre:.github/workflows/buildinfo.py

; Cloud Builds

[env:cloud_arduino_nano_esp32]
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
lib_deps = 
	${options.lib_deps_native}
	; ${options.lib_deps_board_only}

[env:cloud_recette]
platform = native
test_ignore = test_embedded ; if there were some in the future
lib_deps = 
	${options.lib_deps_native}
build_flags =
  ${options.recette_flags}
	${options.coverage_buildflag}
